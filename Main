using LinearAlgebra
using Images

struct sphereStruct
  type::String
  center::AbstractArray
  radius::Float64
end

struct triStruct
  type::String
  verticies::AbstractArray
  #position::AbstractArray
  sColor::AbstractArray
end

const Intersect = [0,0,0]
const screenSize = 128
const pixSize = 0.05
const camPos = [0, -1, -2]
const frameCount = 24
objects = [triStruct("tri",[[-1.0, -10.0, 14.0], [1.0, 6.0,20], [-2.0, 0.0, 1.0]],[0,255,0]), triStruct("tri",[[-1.0, 3.0, 3.0], [11.0, 2.0,11.0], [1.0, -3.5, 1.0]],[0,255,0]),sphereStruct("sph",[0.0,0.0,0.0],1.0)]
# const objects = [triStruct("tri",[[-1.0, -3.0, 14.0], [1.0, 6.0,20], [-2.0, 0.0, 1.0]],[0,255,0]),sphereStruct("sph",[0.0,0.0,0.0],1.0)]
rayDirs = fill([],screenSize,screenSize)

function populateRayDirs()
  for x = 1:screenSize
    for y = 1:screenSize
      setindex!(rayDirs,rayDir(x,y),x,y,)
      # println(rayDirs[x,y])
    end
  end
end

function intersectTri(tri, intersect)
  @fastmath if(dot(cross(tri[2] - tri[3], intersect - tri[3]),cross(tri[2] - tri[3],tri[1]-tri[3])) < 0)
    return false
  elseif(dot(cross(tri[1] - tri[3], intersect - tri[3]),cross(tri[1] - tri[3],tri[2]-tri[3])) < 0)
    return false
  elseif(dot(cross(tri[1] - tri[2], intersect - tri[2]),cross(tri[1] - tri[2],tri[3]-tri[2])) < 0)
    return false
  else
    return true
  end
end

function polyPlane(tri)
  normal = cross(tri[2]-tri[1], tri[3]-tri[1])
  k = dot(-normal, tri[1])
  return [normal[1],normal[2],normal[3],k]
end

function bench()
  @simd for x = 1:1000000
    intersectTri(Triangle, Intersect)
  end
end

function rayDir(x,y)
  return [pixSize * (x - ((screenSize - 1)/2)), pixSize * (y - ((screenSize - 1)/2)),1]
end

function rayLen(plane,x,y)
  top = dot([plane[1],plane[2],plane[3]],camPos) + plane[4]
  bottom = dot([plane[1],plane[2],plane[3]], rayDirs[x,y])
  return -(top / bottom)
end

function rayPos(dist, angle)
  return dist*angle + camPos
end

function intersectBB(tri, intersect)
  if intersect[1] < min(tri[1][1], tri[2][1], tri[3][1])
    return false
  elseif intersect[1] > max(tri[1][1], tri[2][1], tri[3][1])
    return false
  elseif intersect[2] < min(tri[1][2], tri[2][2], tri[3][2])
    return false
  elseif intersect[2] > max(tri[1][2], tri[2][2], tri[3][2])
    return false
  elseif intersect[3] < min(tri[1][3], tri[2][3], tri[3][3])
    return false
  elseif intersect[3] > max(tri[1][3], tri[2][3], tri[3][3])
    return false
  else
    return true
  end
end


function renderTri(frame, triangle, input)
  trianglePlane = polyPlane(triangle)
  for y = 1:screenSize
    for x = 1:screenSize
      rLen = rayLen(trianglePlane,x,y)
      rPos = rayPos(rLen, rayDirs[x,y])
      if rLen > 0
        if intersectBB(triangle,rPos)
          if intersectTri(triangle, rPos)
            if input[y,x] > rLen || input[y,x] == 0
              setindex!(input, (rLen),y,x)
            end
          end
        end
      end
    end
  end
  # println("")
  # print(input)
  return input
end

function renderSphere(sphere::sphereStruct,x,y)
  oc = camPos - sphere.center
  dir = rayDirs[x,y]
  a = dot(dir, dir)
  b = 2.0 * dot(oc, dir)
  c = dot(oc,oc ) - sphere.radius*sphere.radius
  discr = b*b - 4*a*c
  if discr < 0
    return 0.0
  else
    return -(-b - sqrt(discr)) / (2.0*a)
  end
end



function shader(frame,img)
  for i in eachindex(img)
    # println(img[i])
    if img[i] != 0
      setindex!(img,clamp((1/(img[i])),0,1) ,i)
    else
      setindex!(img, 0.0,i)
    end
  end
  save("img.png", colorview(Gray,img))
end

function renderLoop()
  for i = 1:frameCount
    output = zeros(screenSize,screenSize)
    print(size(objects))
    for j = 1:3
      #print(output)
      if objects[j].type == "tri"
        # println("")
        # print(objects[j].verticies)
        output = renderTri(i, objects[j].verticies, output)
      elseif objects[j].type == "sph"
        print("sphere")
        for y = 1:screenSize
          for x = 1:screenSize
            out = renderSphere(objects[j],x,y)
            if out != 0.0
              setindex!(output,-out,y,x)
            end
          end
        end
      end
    end
    shader(i,output)
  end
end

populateRayDirs()
@time renderLoop()
